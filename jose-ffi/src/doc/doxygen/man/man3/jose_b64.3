.TH "jose_b64" 3 "Tue May 30 2017" "José" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jose_b64 \- URL-safe Base64 Encoding & Decoding\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "size_t \fBjose_b64_dec\fP (const json_t *i, void *o, size_t ol)"
.br
.RI "Decodes a URL-safe Base64 JSON string to a buffer\&. "
.ti -1c
.RI "\fBjose_io_t\fP * \fBjose_b64_dec_io\fP (\fBjose_io_t\fP *next)"
.br
.RI "Creates a new IO object which performs URL-safe Base64 decoding\&. "
.ti -1c
.RI "size_t \fBjose_b64_dec_buf\fP (const void *i, size_t il, void *o, size_t ol)"
.br
.RI "Decodes a URL-safe Base64 buffer to an output buffer\&. "
.ti -1c
.RI "json_t * \fBjose_b64_dec_load\fP (const json_t *i)"
.br
.RI "Decodes a JSON string from a URL-safe Base64 JSON string\&. "
.ti -1c
.RI "json_t * \fBjose_b64_enc\fP (const void *i, size_t il)"
.br
.RI "Encodes data to a URL-safe Base64 JSON string\&. "
.ti -1c
.RI "\fBjose_io_t\fP * \fBjose_b64_enc_io\fP (\fBjose_io_t\fP *next)"
.br
.RI "Creates a new IO object which performs URL-safe Base64 encoding\&. "
.ti -1c
.RI "size_t \fBjose_b64_enc_buf\fP (const void *i, size_t il, void *o, size_t ol)"
.br
.RI "Encodes data to a URL-safe Base64 buffer\&. "
.ti -1c
.RI "json_t * \fBjose_b64_enc_dump\fP (const json_t *i)"
.br
.RI "Encodes the input JSON as a URL-safe Base64 JSON string\&. "
.in -1c
.SH "Detailed Description"
.PP 
URL-safe Base64 Encoding & Decoding\&. 


.SH "Function Documentation"
.PP 
.SS "size_t jose_b64_dec (const json_t * i, void * o, size_t ol)"

.PP
Decodes a URL-safe Base64 JSON string to a buffer\&. If \fCo\fP is NULL, the number of output bytes necessary is returned\&.
.PP
This function will never write more than \fCol\fP bytes\&. If the output buffer is too small, an error will occur\&.
.PP
\fBParameters:\fP
.RS 4
\fIi\fP The input URL-safe Base64 JSON string\&. 
.br
\fIo\fP The output buffer (may be NULL)\&. 
.br
\fIol\fP The size of the output buffer\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes that were (or would be) written\&. If an error occurs, SIZE_MAX is returned\&. 
.RE
.PP

.SS "\fBjose_io_t\fP* jose_b64_dec_io (\fBjose_io_t\fP * next)"

.PP
Creates a new IO object which performs URL-safe Base64 decoding\&. All data written to the returned IO object will be decoded before passing it on to the next IO object in the chain\&.
.PP
\fBParameters:\fP
.RS 4
\fInext\fP The next IO object in the chain\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The new IO object or NULL on error\&. 
.RE
.PP

.SS "size_t jose_b64_dec_buf (const void * i, size_t il, void * o, size_t ol)"

.PP
Decodes a URL-safe Base64 buffer to an output buffer\&. If \fCo\fP is NULL, the number of output bytes necessary is returned\&.
.PP
This function will never write more than \fCol\fP bytes\&. If the output buffer is too small, an error will occur\&.
.PP
\fBParameters:\fP
.RS 4
\fIi\fP The input URL-safe Base64 buffer\&. 
.br
\fIil\fP The size of the data in the input buffer\&. 
.br
\fIo\fP The output buffer\&. 
.br
\fIol\fP The size of the output buffer\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes that were (or would be) written\&. If an error occurs, SIZE_MAX is returned\&. 
.RE
.PP

.SS "json_t* jose_b64_dec_load (const json_t * i)"

.PP
Decodes a JSON string from a URL-safe Base64 JSON string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP The input URL-safe Base64 JSON string containing JSON data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The output JSON data\&. 
.RE
.PP

.SS "json_t* jose_b64_enc (const void * i, size_t il)"

.PP
Encodes data to a URL-safe Base64 JSON string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP The input buffer\&. 
.br
\fIil\fP The size of the data in the input buffer\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The decoded JSON data\&. If an error occurs, NULL is returned\&. 
.RE
.PP

.SS "\fBjose_io_t\fP* jose_b64_enc_io (\fBjose_io_t\fP * next)"

.PP
Creates a new IO object which performs URL-safe Base64 encoding\&. All data written to the returned IO object will be encoded before passing it on to the next IO object in the chain\&.
.PP
\fBParameters:\fP
.RS 4
\fInext\fP The next IO object in the chain\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The new IO object or NULL on error\&. 
.RE
.PP

.SS "size_t jose_b64_enc_buf (const void * i, size_t il, void * o, size_t ol)"

.PP
Encodes data to a URL-safe Base64 buffer\&. If \fCo\fP is NULL, the number of output bytes necessary is returned\&.
.PP
This function will never write more than \fCol\fP bytes\&. If the output buffer is too small, an error will occur\&.
.PP
\fBParameters:\fP
.RS 4
\fIi\fP The input buffer\&. 
.br
\fIil\fP The size of the data in the input buffer\&. 
.br
\fIo\fP The output URL-safe Base64 buffer\&. 
.br
\fIol\fP The size of the output buffer\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The number of bytes that were (or would be) written\&. If an error occurs, SIZE_MAX is returned\&. 
.RE
.PP

.SS "json_t* jose_b64_enc_dump (const json_t * i)"

.PP
Encodes the input JSON as a URL-safe Base64 JSON string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIi\fP The input JSON data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The output URL-safe Base64 JSON string\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for José from the source code\&.
